{
  "compilerOptions": {
    "target": "ES2020",   // 生成js 的版本
    "useDefineForClassFields": true, // 是否使用 Object.defineProperty 定义类实例属性
    "module": "ESNext",   // 生成的module的形式，esm，cmd，amd啥的
    "lib": ["ES2020", "DOM", "DOM.Iterable"],   // 编译过程中需要引入的库文件的列表
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",  //// 用于选择模块解析策略 node/classic
    "allowImportingTsExtensions": true,   // 允许从没有默认导出的模块中导入类型定义(.d.ts)文件
    "resolveJsonModule": true, // 自动解析JSON文件
    "isolatedModules": true,
    "noEmit": true, // 不输出文件
    "jsx": "preserve", // 在 .tsx 文件里支持 JSX: 'preserve', 'react-native', or 'react'
 
    /* Linting */     /* 严格的类型检查 */
    "strict": true,  // 启用所有严格类型检查
    "noUnusedLocals": true,  // 检查未使用的局部变量
    "noUnusedParameters": true, // 检查未使用的参数
    "noFallthroughCasesInSwitch": true, // 检查 switch 语句包含正确的 break

    "baseUrl": ".", // 用于设置解析非相对模块名称的基本目录，相对模块不会受到baseUrl的影响
    "paths": { // 用于设置模块名到基于baseUrl的路径映射
      "@/*": ["src/*"],
      "#/*": ["types/*"],
      "@views/*": ["src/views/*"],
      "@api/*": ["src/api/*"]
    }
  },
  //用于指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载
  "types": [
    "vite/client"
  ],
  // 指定编译的文件，没有include和exclude时候用
  // "file": [],
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue", "types/**/*.d.ts"], // include也可以指定要编译的路径列表,但是和files的区别在于,这里的路径可以是文件夹,也可以是文件,可以使用相对和绝对路径,而且可以使用通配符,比如"./src"即表示要编译src文件夹下的所有文件以及子文件夹的文件 
  "references": [{ "path": "./tsconfig.node.json" }],
  "exclude": ["dist", "node_modules"] // exclude表示要排除的、不编译的文件,它也可以指定一个列表,规则和include一样,可以是文件或文件夹,可以是相对路径或绝对路径,可以使用通配符 
}
